

# Explore and explain the various methods in console function





	In javascript, the console is an object which provides access to the browser debugging console. 
We can open a console in web browser by using: Ctrl + Shift + K for windows and Command + Option + K for Mac. 
The console object provides us with several different methods, like :

	1.log():
      		Mainly used to log(print) the output to the console. We can put any type inside the log(), be it a string, array, object, boolean etc.
	fox ex,
		console.log('abc');  


	2.error():
		Used to log error message to the console. Useful in testing of code. By default the error message will be highlighted with red color.
	for ex,
		console.error('This is a simple error');  

	3.warn():
		Used to log warning message to the console. By default the warning message will be highlighted with yellow color.
	for ex,
		console.warn('This is a warning.');  
	
	4.clear():
		Used to clear the console. The console will be cleared, in case of Chrome a simple overlayed text will be printed like : ‘Console was cleared’ while in firefox no message is returned.
	for ex,
		console.clear();  


	5.time() and timeEnd():
		Whenever we want to know the amount of time spend by a block or a function, we can make use of the time() and timeEnd() methods provided by the javascript console object. They take a label which must be same, and the code inside can be anything( function, object, simple console).
	for ex,
		console.time('abc'); 

	6.table():
		This method allows us to generate a table inside a console. The input must be an array or an object which will be shown as a table.
	for ex,
			console.table({'a':1, 'b':2}); 

	7.count():
		This method is used to count the number that the function hit by this counting method.
	for ex,
			    console.count(i); 

	8.group() and groupEnd():
			group() and groupEnd() methods of the console object allows us to group contents in a separate block, which will be indented. Just like the time() and the timeEnd() they also accepts label, again of same value.
		for ex,
				console.group('simple'); 

	9.custom console logs:
				User can add Styling to the console logs in order to make logs Custom . The Syntax for it is to add the css styling as a parameter to the logs which will replace %c in the logs as shown in the example below .
		for ex,
				const spacing = '10px'; 
  				const styles = `padding: ${spacing}; background-color: white; color: green; font-style:  italic; border: 1px solid black; font-size: 2em;`; 
  				console.log('%cGeeks for Geeks', styles); 
